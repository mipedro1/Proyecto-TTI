// $Header$
//--------------------------------------------------------------------------------
// matrix
//--------------------------------------------------------------------------------
// Proyecto-TTI
//
// Copyright (c) 2020, Meysam Mahooti
//
// Created: 2025/06/04
//
/** @file matrix.hpp
 * @brief This class represents a mathematical matrix and provides various 
 *        matrix operations 
 *
 *	@author Miguel de Pedro Olagaray
 *	@bug No knows bugs.
 */
//--------------------------------------------------------------------------------
#ifndef _MATRIX_
#define _MATRIX_

#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <iostream>
#include "..\include\rpoly.hpp"

using namespace std;

class Matrix{
public:
	int n_row,n_column;
	double **data;
	
	//Constructores
	
	//-----------------------------------------------------------------------------------------------
	// Matrix()
	//-----------------------------------------------------------------------------------------------
	/**
	 *	@brief this function creates a matrix
	 * 
	 *      @return Result. 
	 */
	//-----------------------------------------------------------------------------------------------
	Matrix();
	
	//-----------------------------------------------------------------------------------------------
	// Matrix(const int v_size)
	//-----------------------------------------------------------------------------------------------
	/**
	 *	@brief this function creates a matrix (vector)
	 * 
	 *      @return Result. 
	 */
	//-----------------------------------------------------------------------------------------------
	Matrix(const int v_size);
	
	//-----------------------------------------------------------------------------------------------
	// Matrix(const int n_row,const int n_column)
	//-----------------------------------------------------------------------------------------------
	/**
	 *	@brief this function creates a matrix
	 * 
	 *      @return Result. 
	 */
	//-----------------------------------------------------------------------------------------------
	Matrix(const int n_row,const int n_column);
	
	
	
	// Member Operators
	double& operator () (const int n);
	double& operator () (const int n_row,const int n_column);
	Matrix& operator + (Matrix &m);
	Matrix& operator + (double s);
	Matrix& operator - (Matrix &m);
	Matrix& operator - (double s);
	Matrix& operator * (Matrix &m);
	Matrix& operator * (double s);
	Matrix& operator / (Matrix &m);
	Matrix& operator / (double s);
	Matrix& operator = (Matrix &m);
	
	//-----------------------------------------------------------------------------------------------
	// inv()
	//-----------------------------------------------------------------------------------------------
	/**
	 *	@brief this function calculates the inverse of a matrix
	 * 
	 *      @return Result. 
	 */
	//-----------------------------------------------------------------------------------------------
	Matrix& inv();
	
	//-----------------------------------------------------------------------------------------------
	// det()
	//-----------------------------------------------------------------------------------------------
	/**
	 *	@brief this function calculates the determinant of a matrix
	 * 
	 *      @return Result. 
	 */
	//-----------------------------------------------------------------------------------------------
	double det() const;
	
	//-----------------------------------------------------------------------------------------------
	// transpose()
	//-----------------------------------------------------------------------------------------------
	/**
	 *	@brief this function calculates the transpose of a matrix
	 * 
	 *      @return Result. 
	 */
	//-----------------------------------------------------------------------------------------------
	Matrix& transpose();
	
	//-----------------------------------------------------------------------------------------------
	// dot(Matrix& m)
	//-----------------------------------------------------------------------------------------------
	/**
	 *	@brief this function calculates the dot product of two matrices
	 * 
	 *      @return Result. 
	 */
	//-----------------------------------------------------------------------------------------------
	double dot(Matrix& m);
	
	//-----------------------------------------------------------------------------------------------
	// cross(Matrix& m)
	//-----------------------------------------------------------------------------------------------
	/**
	 *	@brief this function calculates the cross product of two matrices
	 * 
	 *      @return Result. 
	 */
	//-----------------------------------------------------------------------------------------------
	Matrix& cross(Matrix& m);
	
	//-----------------------------------------------------------------------------------------------
	// extract_vector(int indiceInicio, int indiceFinal)
	//-----------------------------------------------------------------------------------------------
	/**
	 *	@brief this function returns a vector from the matrix
	 * 
	 *      @return Result. 
	 */
	//-----------------------------------------------------------------------------------------------
	Matrix& extract_vector(int indiceInicio, int indiceFinal);
	
	//-----------------------------------------------------------------------------------------------
	// union_vector(Matrix& m)
	//-----------------------------------------------------------------------------------------------
	/**
	 *	@brief this function returns the union of two vectors 
	 * 
	 *      @return Result. 
	 */
	//-----------------------------------------------------------------------------------------------
	Matrix& union_vector(Matrix& m);
	
	//-----------------------------------------------------------------------------------------------
	// extract_row(int n)
	//-----------------------------------------------------------------------------------------------
	/**
	 *	@brief this function returns a row from the matrix
	 * 
	 *      @return Result. 
	 */
	//-----------------------------------------------------------------------------------------------
	Matrix& extract_row(int n);
	
	//-----------------------------------------------------------------------------------------------
	// extract_column(int n)
	//-----------------------------------------------------------------------------------------------
	/**
	 *	@brief this function returns a column from the matrix
	 * 
	 *      @return Result. 
	 */
	//-----------------------------------------------------------------------------------------------
	Matrix& extract_column(int n);
	
	//-----------------------------------------------------------------------------------------------
	// assign_row(int n, Matrix& m)
	//-----------------------------------------------------------------------------------------------
	/**
	 *	@brief this function assigns a row to the matrix
	 * 
	 *      @return Result. 
	 */
	//-----------------------------------------------------------------------------------------------
	Matrix& assign_row(int n, Matrix& m);
	
	//-----------------------------------------------------------------------------------------------
	// assign_column(int n, Matrix& m)
	//-----------------------------------------------------------------------------------------------
	/**
	 *	@brief this function assigns a column to the matrix
	 * 
	 *      @return Result. 
	 */
	//-----------------------------------------------------------------------------------------------
	Matrix& assign_column(int n, Matrix& m);
	
	
	
	// Non-member operators
	friend ostream& operator << (ostream &o,Matrix&m);
	
	
	
};

// Operator overloading
ostream& operator << (ostream &o, Matrix &m);

// Methods

//-----------------------------------------------------------------------------------------------
// zeros(const int n_row, const int n_column)
//-----------------------------------------------------------------------------------------------
/**
 *	@brief this function returns a matrix with all of its elements set to 0
 * 
 *      @return Result. 
 */
//-----------------------------------------------------------------------------------------------
Matrix& zeros(const int n_row, const int n_column);

//-----------------------------------------------------------------------------------------------
// eye(int n)
//-----------------------------------------------------------------------------------------------
/**
 *	@brief this function returns the identity matrix
 * 
 *      @return Result. 
 */
//-----------------------------------------------------------------------------------------------
Matrix& eye(int n);

//-----------------------------------------------------------------------------------------------
// zeros(int n)
//-----------------------------------------------------------------------------------------------
/**
 *	@brief this function returns a matrix with all of its elements set to 0
 * 
 *      @return Result. 
 */
//-----------------------------------------------------------------------------------------------
Matrix& zeros(int n);

//-----------------------------------------------------------------------------------------------
// norm(Matrix& m)
//-----------------------------------------------------------------------------------------------
/**
 *	@brief this function returns the norm of a matrix
 * 
 *      @return Result. 
 */
//-----------------------------------------------------------------------------------------------
double norm(Matrix& m);

//-----------------------------------------------------------------------------------------------
// roots( Matrix& poly)
//-----------------------------------------------------------------------------------------------
/**
 *	@brief this function calculates the roots of a polynomial represented by the matrix coefficients
 * 
 *      @return Result. A matrix containing the roots of the polynomial.
 */
//-----------------------------------------------------------------------------------------------
Matrix& roots( Matrix& poly);


#endif